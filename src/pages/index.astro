---
import Layout from '../layouts/Layout.astro';
import PluginCard from '../components/PluginCard.astro';

const allPossibleCategories = ['Appearance', 'Developer Tools', 'Productivity', 'Themes', 'Integrations', 'Viewer', 'Search', 'Tags', 'Editor', 'Files', 'Personal Knowledge Management'];
const pluginsRaw = await fetch('https://raw.githubusercontent.com/joplin/plugins/master/manifests.json').then(res => res.json());
const statsRaw = await fetch('https://raw.githubusercontent.com/joplin/plugins/master/stats.json').then(res => res.json());

const plugins = Object.values(pluginsRaw);

function getCategory(id) {
	if (!pluginsRaw[id].categories) {
		return [];
	} else {
		return pluginsRaw[id].categories;
	}
}

function hasCategory(plugin, targetCat) {
	if (plugin.categories == null) {
		return false;
	} else {
		for (let i = 0; i < plugin.categories.length; i++) {
			const category = plugin.categories[i];
			if (category.toLowerCase() === targetCat.toLowerCase()) {
				return true;
			}
		}
	}
}

function isRecommended(plugin) {
	if (plugin._recommended == null) {
		return false;
	} else {
		return plugin._recommended;
	}
}

const trendingPlugins = (stats, topn) => {
	let result = [];
	for (const plugin in stats) {
		if (Object.prototype.hasOwnProperty.call(stats, plugin)) {
			const versions = Object.values(stats[plugin]);
			const downloadCount = versions[versions.length - 1].downloadCount;
			const createdAt = new Date(versions[versions.length - 1].createdAt);
			const popularity = downloadCount / (Date.now() - createdAt)
			result.push({
				id: plugin,
				popularity: popularity
			});
		}
	}

	return result.sort((a, b) => b.popularity - a.popularity).slice(0, topn).map((item) => {
		return {
			id: item.id,
			popularity: item.popularity,
			data: pluginsRaw[item.id]
		}
	});
}

function isCategoryEmpty(category) {	
	for (let index = 0; index < plugins.length; index++) {
		const plugin = plugins[index];
		if (hasCategory(plugin, category)) {
			return false;
		}
	}
	return true;
}

---

<Layout title="Joplin Plugins">
	<main>
		<div class="container banner">
			<div class="row justify-content-center pb-3">
				<div class="col-12 text-center">
					<h2 class="mb-3">Extend Your Joplin.</h2>
				</div>
				<div class="col-5 text-center">
					<p class="text-muted subtitle mb-3">Joplin has a plenty of plugins provided by community which can be helpful
						in your workflow.</p>
				</div>
			</div>
			<!-- <div class="row justify-content-center">
				<div class="input-group banner-search mb-3">
					<input type="text" class="form-control" aria-label="Text input with dropdown button">
					<button class="btn btn-outline-secondary dropdown-toggle" type="button" data-bs-toggle="dropdown"
						aria-expanded="false">Category</button>
					<ul class="dropdown-menu dropdown-menu-end">
						<li><a class="dropdown-item" href="#">All</a></li>
						<li>
							<hr class="dropdown-divider">
						</li>
						<li><a class="dropdown-item" href="#">Separated link</a></li>
					</ul>
				</div>
			</div> -->
		</div>

		<div class="container">
			<div class="row">
				<!-- Tab Selector -->
				<div class="col-2 nav-list py-3">
					<nav class="nav nav-pills flex-column" id="nav-tab" role="tablist" aria-orientation="vertical">
						<button class="nav-link active" id="nav-all-tab" data-bs-toggle="tab" data-bs-target="#nav-all"
							type="button" role="tab" aria-controls="nav-all" aria-selected="false">All</button>
						{allPossibleCategories.map((item) => (
						<>
							<button class="nav-link" id={`nav-${item.toLowerCase().replace(/[ ]/g, '-' )}-tab`} data-bs-toggle="tab"
								data-bs-target={`#nav-${item.toLowerCase().replace(/[ ]/g, '-' )}`} type="button" role="tab"
								aria-controls={`nav-${item.toLowerCase().replace(/[ ]/g, '-' )}`} aria-selected="false">{item}</button>
						</>
						))}
					</nav>

				</div>

				<!-- Tab Content -->
				<div class="col-10">
					<div class="tab-content" id="nav-tabContent">
						<div class="tab-pane fade show active" id='nav-all' role="tabpanel" aria-labelledby='nav-all-tab'
							tabindex={0}>
							<!-- Trending Section -->
							<div class="row mx-3 py-4">
							<div class="anchor" id="trending-section"></div>
							<h5 class="py-3">Trending Plugins</h5>
								{
									trendingPlugins(statsRaw, 3).map((item) => (
										<div class="col-4 gx-3 mb-3">
											<PluginCard title={item.data.name} body={item.data.description} id={item.id} categories={getCategory(item.id)} recommended={isRecommended(item)}>
											</PluginCard>
										</div>
									))
								}
							</div>
							<!-- Recommended Section -->
							
							<div class="row mx-3 py-4">
								<div class="anchor" id="recommended-section"></div>
								<h5 class="py-3">Recommended Plugins</h5>
								{plugins.map((item) => (
									isRecommended(item) ?
									<>
										<div class="col-4 gx-3 mb-3">
											<PluginCard title={item.name} body={item.description} id={item.id} categories={getCategory(item.id)} recommended={true}>
											</PluginCard>
										</div>
									</>:<></>
									))}
							</div>
							<!-- All Plugins -->
							<div class="row mx-3 py-4">
							<div class="anchor" id="all-plugins-section"></div>
							<h5 class="py-3">All Plugins</h5>
								{plugins.map((item) => (
								<>
									<div class="col-4 gx-3 mb-3">
										<PluginCard title={item.name} body={item.description} id={item.id} categories={getCategory(item.id)} recommended={isRecommended(item)}>
										</PluginCard>
									</div>
								</>
								))}
							</div>

						</div>

						<!-- Plugins in categories -->
						{allPossibleCategories.map((category) => (
						<>
							<div class="tab-pane fade show" id={`nav-${category.toLowerCase().replace(/[ ]/g, '-' )}`} role="tabpanel"
								aria-labelledby={`nav-${category.toLowerCase().replace(/[ ]/g, '-' )}-tab`} tabindex={0}>
								<div class="row mx-3 py-4">
									{plugins.map((plugin) => (
										hasCategory(plugin, category.toLowerCase()) ?
									<>
										<div class="col-4 gx-3 mb-3">
											<PluginCard title={plugin.name} body={plugin.description} id={plugin.id} categories={getCategory(plugin.id)} recommended={isRecommended(category)}>
											</PluginCard>
										</div>
									</>:<></>
									))}
									{
										isCategoryEmpty(category) ? 
										<div class="py-5">
											<p class="text-center"><span class="fa-solid fa-box-open fa-6x text-muted"></span></p>
											<h4 class="text-muted text-center">Oops... There are no plugins under this category.</h4> 
										</div>

										: <></>
									}
								</div>
							</div>
						</>
						))}

					</div>
				</div>
			</div>
		</div>
	</main>
</Layout>

<style>
	:root {
		--astro-gradient: linear-gradient(0deg, #4F39FA, #DA62C4);
	}

	.banner {
		padding-top: 4rem;
		padding-bottom: 4rem;
	}

	.banner-search {
		width: 42%;
	}

	.nav-pills {
		--bs-nav-pills-border-radius: 0.375rem;
		--bs-nav-pills-link-active-color: var(--bs-black);
		--bs-nav-pills-link-active-bg: var(--bs-gray-300);
	}

	.nav {
		--bs-nav-link-color: var(--bs-gray-700);
		--bs-nav-link-hover-color: var(--bs-black);
		--bs-nav-link-disabled-color: #6c757d;
	}

	.nav-list {
		background-color: white;
		border-radius: 0.375rem;
	}

	.tab-content {
		min-height: auto;
		background-color: white;
		border-radius: 0.375rem;
	}

	.card {
		border-radius: 0.375rem;
	}

	.anchor {
		position: relative;
    top: -100px;
    display: block;
    height: 0;
    overflow: hidden;
	}
</style>